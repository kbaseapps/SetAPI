{"functions":{"get_set_v1":{"name":"get_set_v1","comment":"Generic method for getting sets from the SetAPI.","place":null,"input":[{"type":"SetAPI.GetSetV1Params","comment":"Generic \"get_***_set\" or \"get_set\" request parameters:\n- ref: workspace reference for the set object; can be a KBase UPA (nnnnn/nn/nn)\n    or <workspace_name>/<object_name>\n\n- include_item_info - 1 or 0; if 1, the workspace info (with\n    metadata) for each object in the set is included.\n\n- include_set_item_ref_paths - 1 or 0; if 1, provides ref_path for each item\n    in the set. The ref_path returned for each item is either\n\n    <ref_path_to_set>;<item_ref>\n\n    if ref_path_to_set is supplied or\n\n    <set_ref>;<item_ref>\n\n    if ref_path_to_set is not supplied.\n\n- ref_path_to_set - optional; the ref path for the set object.\n\nNOTE: sets can be retrieved using any of the `get_***_set` API calls;\nat present there is no check that the set type returned matches the API method used."}],"output":[{"type":"SetAPI.GetGenericSetV1Result","comment":""}]},"get_differential_expression_matrix_set_v1":{"name":"get_differential_expression_matrix_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.GetSetV1Params","comment":"Generic \"get_***_set\" or \"get_set\" request parameters:\n- ref: workspace reference for the set object; can be a KBase UPA (nnnnn/nn/nn)\n    or <workspace_name>/<object_name>\n\n- include_item_info - 1 or 0; if 1, the workspace info (with\n    metadata) for each object in the set is included.\n\n- include_set_item_ref_paths - 1 or 0; if 1, provides ref_path for each item\n    in the set. The ref_path returned for each item is either\n\n    <ref_path_to_set>;<item_ref>\n\n    if ref_path_to_set is supplied or\n\n    <set_ref>;<item_ref>\n\n    if ref_path_to_set is not supplied.\n\n- ref_path_to_set - optional; the ref path for the set object.\n\nNOTE: sets can be retrieved using any of the `get_***_set` API calls;\nat present there is no check that the set type returned matches the API method used."}],"output":[{"type":"SetAPI.GetDifferentialExpressionMatrixSetV1Result","comment":""}]},"save_differential_expression_matrix_set_v1":{"name":"save_differential_expression_matrix_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.SaveDifferentialExpressionMatrixSetV1Params","comment":"workspace_name or workspace_id - alternative options defining\n    target workspace,\noutput_object_name - workspace object name (this parameter is\n    used together with one of workspace params from above)"}],"output":[{"type":"SetAPI.SaveSetV1Result","comment":"Generic \"save_***_set\" response. Comprises:\n- set_ref: ref for the newly-created set object\n- set_info: KBase Workspace object info list"}]},"get_feature_set_set_v1":{"name":"get_feature_set_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.GetSetV1Params","comment":"Generic \"get_***_set\" or \"get_set\" request parameters:\n- ref: workspace reference for the set object; can be a KBase UPA (nnnnn/nn/nn)\n    or <workspace_name>/<object_name>\n\n- include_item_info - 1 or 0; if 1, the workspace info (with\n    metadata) for each object in the set is included.\n\n- include_set_item_ref_paths - 1 or 0; if 1, provides ref_path for each item\n    in the set. The ref_path returned for each item is either\n\n    <ref_path_to_set>;<item_ref>\n\n    if ref_path_to_set is supplied or\n\n    <set_ref>;<item_ref>\n\n    if ref_path_to_set is not supplied.\n\n- ref_path_to_set - optional; the ref path for the set object.\n\nNOTE: sets can be retrieved using any of the `get_***_set` API calls;\nat present there is no check that the set type returned matches the API method used."}],"output":[{"type":"SetAPI.GetFeatureSetSetV1Result","comment":""}]},"save_feature_set_set_v1":{"name":"save_feature_set_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.SaveFeatureSetSetV1Params","comment":"workspace_name or workspace_id - alternative options defining\n    target workspace,\noutput_object_name - workspace object name (this parameter is\n    used together with one of workspace params from above)"}],"output":[{"type":"SetAPI.SaveSetV1Result","comment":"Generic \"save_***_set\" response. Comprises:\n- set_ref: ref for the newly-created set object\n- set_info: KBase Workspace object info list"}]},"get_expression_set_v1":{"name":"get_expression_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.GetSetV1Params","comment":"Generic \"get_***_set\" or \"get_set\" request parameters:\n- ref: workspace reference for the set object; can be a KBase UPA (nnnnn/nn/nn)\n    or <workspace_name>/<object_name>\n\n- include_item_info - 1 or 0; if 1, the workspace info (with\n    metadata) for each object in the set is included.\n\n- include_set_item_ref_paths - 1 or 0; if 1, provides ref_path for each item\n    in the set. The ref_path returned for each item is either\n\n    <ref_path_to_set>;<item_ref>\n\n    if ref_path_to_set is supplied or\n\n    <set_ref>;<item_ref>\n\n    if ref_path_to_set is not supplied.\n\n- ref_path_to_set - optional; the ref path for the set object.\n\nNOTE: sets can be retrieved using any of the `get_***_set` API calls;\nat present there is no check that the set type returned matches the API method used."}],"output":[{"type":"SetAPI.GetExpressionSetV1Result","comment":""}]},"save_expression_set_v1":{"name":"save_expression_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.SaveExpressionSetV1Params","comment":"workspace_name or workspace_id - alternative options defining\n    target workspace,\noutput_object_name - workspace object name (this parameter is\n    used together with one of workspace params from above)"}],"output":[{"type":"SetAPI.SaveSetV1Result","comment":"Generic \"save_***_set\" response. Comprises:\n- set_ref: ref for the newly-created set object\n- set_info: KBase Workspace object info list"}]},"get_reads_alignment_set_v1":{"name":"get_reads_alignment_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.GetSetV1Params","comment":"Generic \"get_***_set\" or \"get_set\" request parameters:\n- ref: workspace reference for the set object; can be a KBase UPA (nnnnn/nn/nn)\n    or <workspace_name>/<object_name>\n\n- include_item_info - 1 or 0; if 1, the workspace info (with\n    metadata) for each object in the set is included.\n\n- include_set_item_ref_paths - 1 or 0; if 1, provides ref_path for each item\n    in the set. The ref_path returned for each item is either\n\n    <ref_path_to_set>;<item_ref>\n\n    if ref_path_to_set is supplied or\n\n    <set_ref>;<item_ref>\n\n    if ref_path_to_set is not supplied.\n\n- ref_path_to_set - optional; the ref path for the set object.\n\nNOTE: sets can be retrieved using any of the `get_***_set` API calls;\nat present there is no check that the set type returned matches the API method used."}],"output":[{"type":"SetAPI.GetReadsAlignmentSetV1Result","comment":""}]},"save_reads_alignment_set_v1":{"name":"save_reads_alignment_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.SaveReadsAlignmentSetV1Params","comment":"workspace_name or workspace_id - alternative options defining\n    target workspace,\noutput_object_name - workspace object name (this parameter is\n    used together with one of workspace params from above)"}],"output":[{"type":"SetAPI.SaveSetV1Result","comment":"Generic \"save_***_set\" response. Comprises:\n- set_ref: ref for the newly-created set object\n- set_info: KBase Workspace object info list"}]},"get_reads_set_v1":{"name":"get_reads_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.GetSetV1Params","comment":"Generic \"get_***_set\" or \"get_set\" request parameters:\n- ref: workspace reference for the set object; can be a KBase UPA (nnnnn/nn/nn)\n    or <workspace_name>/<object_name>\n\n- include_item_info - 1 or 0; if 1, the workspace info (with\n    metadata) for each object in the set is included.\n\n- include_set_item_ref_paths - 1 or 0; if 1, provides ref_path for each item\n    in the set. The ref_path returned for each item is either\n\n    <ref_path_to_set>;<item_ref>\n\n    if ref_path_to_set is supplied or\n\n    <set_ref>;<item_ref>\n\n    if ref_path_to_set is not supplied.\n\n- ref_path_to_set - optional; the ref path for the set object.\n\nNOTE: sets can be retrieved using any of the `get_***_set` API calls;\nat present there is no check that the set type returned matches the API method used."}],"output":[{"type":"SetAPI.GetReadsSetV1Result","comment":""}]},"save_reads_set_v1":{"name":"save_reads_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.SaveReadsSetV1Params","comment":"workspace_name or workspace_id - alternative options defining\n    target workspace,\noutput_object_name - workspace object name (this parameter is\n    used together with one of workspace params from above)"}],"output":[{"type":"SetAPI.SaveSetV1Result","comment":"Generic \"save_***_set\" response. Comprises:\n- set_ref: ref for the newly-created set object\n- set_info: KBase Workspace object info list"}]},"get_assembly_set_v1":{"name":"get_assembly_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.GetSetV1Params","comment":"Generic \"get_***_set\" or \"get_set\" request parameters:\n- ref: workspace reference for the set object; can be a KBase UPA (nnnnn/nn/nn)\n    or <workspace_name>/<object_name>\n\n- include_item_info - 1 or 0; if 1, the workspace info (with\n    metadata) for each object in the set is included.\n\n- include_set_item_ref_paths - 1 or 0; if 1, provides ref_path for each item\n    in the set. The ref_path returned for each item is either\n\n    <ref_path_to_set>;<item_ref>\n\n    if ref_path_to_set is supplied or\n\n    <set_ref>;<item_ref>\n\n    if ref_path_to_set is not supplied.\n\n- ref_path_to_set - optional; the ref path for the set object.\n\nNOTE: sets can be retrieved using any of the `get_***_set` API calls;\nat present there is no check that the set type returned matches the API method used."}],"output":[{"type":"SetAPI.GetAssemblySetV1Result","comment":""}]},"save_assembly_set_v1":{"name":"save_assembly_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.SaveAssemblySetV1Params","comment":"workspace_name or workspace_id - alternative options defining\n    target workspace,\noutput_object_name - workspace object name (this parameter is\n    used together with one of workspace params from above)"}],"output":[{"type":"SetAPI.SaveSetV1Result","comment":"Generic \"save_***_set\" response. Comprises:\n- set_ref: ref for the newly-created set object\n- set_info: KBase Workspace object info list"}]},"get_genome_set_v1":{"name":"get_genome_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.GetSetV1Params","comment":"Generic \"get_***_set\" or \"get_set\" request parameters:\n- ref: workspace reference for the set object; can be a KBase UPA (nnnnn/nn/nn)\n    or <workspace_name>/<object_name>\n\n- include_item_info - 1 or 0; if 1, the workspace info (with\n    metadata) for each object in the set is included.\n\n- include_set_item_ref_paths - 1 or 0; if 1, provides ref_path for each item\n    in the set. The ref_path returned for each item is either\n\n    <ref_path_to_set>;<item_ref>\n\n    if ref_path_to_set is supplied or\n\n    <set_ref>;<item_ref>\n\n    if ref_path_to_set is not supplied.\n\n- ref_path_to_set - optional; the ref path for the set object.\n\nNOTE: sets can be retrieved using any of the `get_***_set` API calls;\nat present there is no check that the set type returned matches the API method used."}],"output":[{"type":"SetAPI.GetGenomeSetV1Result","comment":""}]},"save_genome_set_v1":{"name":"save_genome_set_v1","comment":"","place":null,"input":[{"type":"SetAPI.SaveGenomeSetV1Params","comment":"workspace_name or workspace_id - alternative options defining\n    target workspace,\noutput_object_name - workspace object name (this parameter is\n    used together with one of workspace params from above)\nsave_search_set - default 'False', save 'KBaseSets.GenomeSet' data type\n                  if set 'True', save 'KBaseSearch.GenomeSet' data type"}],"output":[{"type":"SetAPI.SaveSetV1Result","comment":"Generic \"save_***_set\" response. Comprises:\n- set_ref: ref for the newly-created set object\n- set_info: KBase Workspace object info list"}]},"create_sample_set":{"name":"create_sample_set","comment":"","place":null,"input":[{"type":"SetAPI.CreateRNASeqSampleSetParams","comment":"******* Sample SET METHODS ************\n\n        Note: SampleSets can be retrieved using any of the `get_***_set` API calls;\n        at present there is no check that the set type returned matches the API method used."}],"output":[{"type":"SetAPI.SaveSetV1Result","comment":"Generic \"save_***_set\" response. Comprises:\n- set_ref: ref for the newly-created set object\n- set_info: KBase Workspace object info list"}]},"sample_set_to_samples_info":{"name":"sample_set_to_samples_info","comment":"","place":null,"input":[{"type":"SetAPI.SampleSetToSamplesInfoParams","comment":""}],"output":[{"type":"SetAPI.SampleSetToSamplesInfoResult","comment":""}]},"list_sets":{"name":"list_sets","comment":"Use to get the top-level sets in a WS. Optionally can include\none level down members of those sets.\nNOTE: DOES NOT PRESERVE ORDERING OF ITEM LIST IN DATA","place":null,"input":[{"type":"SetAPI.ListSetParams","comment":"- workspace: workspace name or ID (alternative to\n    workspaces parameter)\n\n- workspaces: list of workspace names or IDs (alternative to\n    workspace parameter)\n\n- include_metadata: flag for including metadata in the Set object info\n    and in the object info of the set items (it affects DP raw data as well)\n\n- include_item_info - 1 or 0; if 1, the workspace info (with\n    metadata) for each object in the set is included.\n\n- include_set_item_ref_paths - 1 or 0; if 1, provides ref_path for each item\n    in the set. The ref_path returned for each item is either\n\n    <ref_path_to_set>;<item_ref>\n\n    if ref_path_to_set is supplied or\n\n    <set_ref>;<item_ref>\n\n    if ref_path_to_set is not supplied."}],"output":[{"type":"SetAPI.ListSetResult","comment":""}]},"get_set_items":{"name":"get_set_items","comment":"Use to drill down into one or more sets, the position in the\nreturn 'sets' list will match the position in the input ref list.\nNOTE: DOES NOT PRESERVE ORDERING OF ITEM LIST IN DATA","place":null,"input":[{"type":"SetAPI.GetSetItemsParams","comment":"- set_refs: list of SetReferences for Set objects.\n\n- include_set_item_ref_paths - 1 or 0; if 1, provides ref_path for each item\n    in the set. The ref_path returned for each item is either\n\n    <ref_path_to_set>;<item_ref>\n\n    if ref_path_to_set is supplied or\n\n    <set_ref>;<item_ref>\n\n    if ref_path_to_set is not supplied."}],"output":[{"type":"SetAPI.GetSetItemsResult","comment":""}]}},"module_name":"SetAPI","sdk_version":"1.2.6","sdk_git_commit":"d11e795a4443ed01baae83c6d000685202387c5b","impl_file_path":"lib/SetAPI/SetAPIImpl.py","spec_files":[{"content":"\n\n#include <workspace.spec>\n\n\nmodule SetAPI {\n\n    /* A boolean. 0 = false, 1 = true. */\n    typedef int boolean;\n\n    /*\n        The workspace ID for a any data object.\n        @id ws\n    */\n    typedef string ws_obj_id;\n\n    typedef structure {\n        string name;\n        ws_obj_id ref;\n    } DataAttachment;\n\n    /*\n        Generic \"save_***_set\" response. Comprises:\n        - set_ref: ref for the newly-created set object\n        - set_info: KBase Workspace object info list\n    */\n\n    typedef structure {\n        string set_ref;\n        Workspace.object_info set_info;\n    } SaveSetV1Result;\n\n\n    /*\n        Generic \"get_***_set\" or \"get_set\" request parameters:\n        - ref: workspace reference for the set object; can be a KBase UPA (nnnnn/nn/nn)\n            or <workspace_name>/<object_name>\n\n        - include_item_info - 1 or 0; if 1, the workspace info (with\n            metadata) for each object in the set is included.\n\n        - include_set_item_ref_paths - 1 or 0; if 1, provides ref_path for each item\n            in the set. The ref_path returned for each item is either\n\n            <ref_path_to_set>;<item_ref>\n\n            if ref_path_to_set is supplied or\n\n            <set_ref>;<item_ref>\n\n            if ref_path_to_set is not supplied.\n\n        - ref_path_to_set - optional; the ref path for the set object.\n\n        NOTE: sets can be retrieved using any of the `get_***_set` API calls;\n        at present there is no check that the set type returned matches the API method used.\n    */\n\n    typedef structure {\n        string ref;\n        boolean include_item_info;\n        boolean include_set_item_ref_paths;\n        list <string> ref_path_to_set;\n    } GetSetV1Params;\n\n    /*\n        Generic item in a KBase set.\n\n        At minimum, set members have a ref (a KBase identifier - UPA or <workspace_name>/<object_name>) and a label.\n\n        The workspace info and the ref path for the set members can be\n        returned by setting the appropriate parameter in the get request (see above).\n    */\n\n    typedef structure {\n        string ref;\n        string ref_path;\n        string label;\n        Workspace.object_info info;\n    } GenericSetItem;\n\n    /*\n        Generic data structure for sets returned by the SetAPI.\n\n        Each set is composed of a description and an items list that holds the set members. See above for set item description.\n    */\n\n    typedef structure {\n        string description;\n        list<GenericSetItem> items;\n    } GenericSet;\n\n    typedef structure {\n        GenericSet data;\n        Workspace.object_info info;\n    } GetGenericSetV1Result;\n\n    /*\n        Generic method for getting sets from the SetAPI.\n    */\n\n    funcdef get_set_v1(GetSetV1Params params)\n        returns (GetGenericSetV1Result result) authentication optional;\n\n\n    /* ******* DIFFERENTIAL EXPRESSION MATRIX SET METHODS ******* */\n\n    /* NOTE: data type explicitly copied from KBaseSets so type and\n    API can evolve independently */\n\n    /*\n        The workspace id for a DifferentialExpressionMatrix data object.\n        @id ws KBaseFeatureValues.DifferentialExpressionMatrix KBaseMatrices.DifferentialExpressionMatrix;\n    */\n    typedef string ws_diffexpmatrix_id;\n\n    /*\n        When saving a DifferentialExpressionMatrixSet, only 'ref' is required.\n        You should never set 'info'; it is generated by the workspace.\n        Retrieve the 'info' for items in the set by setting the input parameter\n        'include_item_info' to 1 in the `get_***_set` query.\n        Retrieve the 'ref_path' for items in the set by setting the input parameter\n        'include_set_item_ref_paths' to 1 in the `get_***_set` query.\n    */\n    typedef structure {\n        ws_diffexpmatrix_id ref;\n        ws_diffexpmatrix_id ref_path;\n        string label;\n        Workspace.object_info info;\n    } DifferentialExpressionMatrixSetItem;\n\n    /*\n        When building a DifferentialExpressionMatrixSet, all DifferentialExpressionMatrices must be\n        built against the same genome. This is not part of the object type, but enforced during saving.\n        @meta ws description as description\n        @meta ws length(items) as item_count\n    */\n\n    typedef structure {\n        string description;\n        list<DifferentialExpressionMatrixSetItem> items;\n    } DifferentialExpressionMatrixSet;\n\n    typedef structure {\n        DifferentialExpressionMatrixSet data;\n        Workspace.object_info info;\n    } GetDifferentialExpressionMatrixSetV1Result;\n\n    funcdef get_differential_expression_matrix_set_v1(GetSetV1Params params)\n        returns (GetDifferentialExpressionMatrixSetV1Result result) authentication optional;\n\n    /*\n        workspace_name or workspace_id - alternative options defining\n            target workspace,\n        output_object_name - workspace object name (this parameter is\n            used together with one of workspace params from above)\n    */\n    typedef structure {\n        string workspace;\n        string output_object_name;\n        DifferentialExpressionMatrixSet data;\n    } SaveDifferentialExpressionMatrixSetV1Params;\n\n\n    funcdef save_differential_expression_matrix_set_v1(SaveDifferentialExpressionMatrixSetV1Params params)\n        returns (SaveSetV1Result result) authentication required;\n\n\n\n\n    /* ******* FEATURE SET SET METHODS ******** */\n\n    /* NOTE: data type explicitly copied from KBaseSets so type and\n    API can evolve independently */\n\n    /*\n        The workspace id for a FeatureSet data object.\n        @id ws KBaseCollections.FeatureSet\n    */\n    typedef string ws_feature_set_id;\n\n    /*\n        When saving a FeatureSetSet, only 'ref' is required.\n        You should never set 'info'; it is generated by the workspace.\n        Retrieve the 'info' for items in the set by setting the input parameter\n        'include_item_info' to 1 in the `get_***_set` query.\n        Retrieve the 'ref_path' for items in the set by setting the input parameter\n        'include_set_item_ref_paths' to 1 in the `get_***_set` query.\n    */\n    typedef structure {\n        ws_feature_set_id ref;\n        ws_feature_set_id ref_path;\n        string label;\n        Workspace.object_info info;\n    } FeatureSetSetItem;\n\n    /*\n        When building a FeatureSetSet, all FeatureSets must be aligned against the same\n        genome. This is not part of the object type, but enforced during a call to\n        save_feature_set_set_v1.\n        @meta ws description as description\n        @meta ws length(items) as item_count\n    */\n    typedef structure {\n        string description;\n        list<FeatureSetSetItem> items;\n    } FeatureSetSet;\n\n    typedef structure {\n        FeatureSetSet data;\n        Workspace.object_info info;\n    } GetFeatureSetSetV1Result;\n\n    funcdef get_feature_set_set_v1(GetSetV1Params params)\n        returns (GetFeatureSetSetV1Result result) authentication optional;\n\n    /*\n        workspace_name or workspace_id - alternative options defining\n            target workspace,\n        output_object_name - workspace object name (this parameter is\n            used together with one of workspace params from above)\n    */\n    typedef structure {\n        string workspace;\n        string output_object_name;\n        FeatureSetSet data;\n    } SaveFeatureSetSetV1Params;\n\n\n    funcdef save_feature_set_set_v1(SaveFeatureSetSetV1Params params)\n        returns (SaveSetV1Result result) authentication required;\n\n\n    /* ******* EXPRESSION SET METHODS ******** */\n\n    /* NOTE: data type explicitly copied from KBaseSets so type and\n    API can evolve independently. */\n\n    /*\n        The workspace id for a ReadsAlignment data object.\n        @id ws KBaseRNASeq.RNASeqExpression\n    */\n    typedef string ws_expression_id;\n\n    /*\n        When saving a ExpressionSet, only 'ref' is required.\n        You should never set 'info'; it is generated by the workspace.\n        Retrieve the 'info' for items in the set by setting the input parameter\n        'include_item_info' to 1 in the `get_***_set` query.\n        Retrieve the 'ref_path' for items in the set by setting the input parameter\n        'include_set_item_ref_paths' to 1 in the `get_***_set` query.\n    */\n    typedef structure {\n        ws_expression_id ref;\n        ws_expression_id ref_path;\n        string label;\n        list<DataAttachment> data_attachments;\n        Workspace.object_info info;\n    } ExpressionSetItem;\n\n    /*\n        When building a ExpressionSet, all Expression objects must be aligned against the same\n        genome. This is not part of the object type, but enforced during a call to\n        save_expression_set_v1.\n        @meta ws description as description\n        @meta ws length(items) as item_count\n    */\n    typedef structure {\n        string description;\n        list<ExpressionSetItem> items;\n    } ExpressionSet;\n\n    typedef structure {\n        ExpressionSet data;\n        Workspace.object_info info;\n    } GetExpressionSetV1Result;\n\n    funcdef get_expression_set_v1(GetSetV1Params params)\n        returns (GetExpressionSetV1Result result) authentication optional;\n\n    /*\n        workspace_name or workspace_id - alternative options defining\n            target workspace,\n        output_object_name - workspace object name (this parameter is\n            used together with one of workspace params from above)\n    */\n    typedef structure {\n        string workspace;\n        string output_object_name;\n        ExpressionSet data;\n    } SaveExpressionSetV1Params;\n\n\n    funcdef save_expression_set_v1(SaveExpressionSetV1Params params)\n        returns (SaveSetV1Result result) authentication required;\n\n\n    /* ******* READS ALIGNMENT SET METHODS ******** */\n\n    /* NOTE: data type explicitly copied from KBaseSets so type and\n    API can evolve independently */\n\n    /*\n        The workspace id for a ReadsAlignment data object.\n        @id ws KBaseRNASeq.RNASeqAlignment\n    */\n    typedef string ws_reads_align_id;\n\n    /*\n        When saving a ReadsAlignmentSet, only 'ref' is required.\n        You should never set 'info'; it is generated by the workspace.\n        Retrieve the 'info' for items in the set by setting the input parameter\n        'include_item_info' to 1 in the `get_***_set` query.\n        Retrieve the 'ref_path' for items in the set by setting the input parameter\n        'include_set_item_ref_paths' to 1 in the `get_***_set` query.\n    */\n    typedef structure {\n        ws_reads_align_id ref;\n        ws_reads_align_id ref_path;\n        string label;\n        Workspace.object_info info;\n        list<DataAttachment> data_attachments;\n    } ReadsAlignmentSetItem;\n\n    /*\n        When building a ReadsAlignmentSet, all ReadsAlignments must be aligned against the same\n        genome. This is not part of the object type, but enforced during a call to\n        save_reads_alignment_set_v1.\n        @meta ws description as description\n        @meta ws length(items) as item_count\n    */\n    typedef structure {\n        string description;\n        list<ReadsAlignmentSetItem> items;\n    } ReadsAlignmentSet;\n\n    typedef structure {\n        ReadsAlignmentSet data;\n        Workspace.object_info info;\n    } GetReadsAlignmentSetV1Result;\n\n    funcdef get_reads_alignment_set_v1(GetSetV1Params params)\n        returns (GetReadsAlignmentSetV1Result result) authentication optional;\n\n    /*\n        workspace_name or workspace_id - alternative options defining\n            target workspace,\n        output_object_name - workspace object name (this parameter is\n            used together with one of workspace params from above)\n    */\n    typedef structure {\n        string workspace;\n        string output_object_name;\n        ReadsAlignmentSet data;\n    } SaveReadsAlignmentSetV1Params;\n\n\n    funcdef save_reads_alignment_set_v1(SaveReadsAlignmentSetV1Params params)\n        returns (SaveSetV1Result result) authentication required;\n\n\n\n    /* ******* READS SET METHODS ************ */\n\n    /* NOTE: data type explicitly copied from KBaseSets so type and\n    API can evolve independently */\n\n    /*\n        The workspace ID for a Reads data object.\n        @id ws KBaseFile.PairedEndLibrary KBaseFile.SingleEndLibrary\n    */\n    typedef string ws_reads_id;\n\n    /*\n        When saving a ReadsSet, only 'ref' is required.\n        You should never set 'info'; it is generated by the workspace.\n        Retrieve the 'info' for items in the set by setting the input parameter\n        'include_item_info' to 1 in the `get_***_set` query.\n        Retrieve the 'ref_path' for items in the set by setting the input parameter\n        'include_set_item_ref_paths' to 1 in the `get_***_set` query.\n    */\n    typedef structure {\n        ws_reads_id ref;\n        ws_reads_id ref_path;\n        string label;\n        list <DataAttachment> data_attachments;\n        Workspace.object_info info;\n    } ReadsSetItem;\n\n    /*\n        @meta ws description as description\n        @meta ws length(items) as item_count\n    */\n    typedef structure {\n        string description;\n        list<ReadsSetItem> items;\n    } ReadsSet;\n\n    typedef structure {\n        ReadsSet data;\n        Workspace.object_info info;\n    } GetReadsSetV1Result;\n\n    funcdef get_reads_set_v1(GetSetV1Params params)\n        returns (GetReadsSetV1Result result) authentication optional;\n\n    /*\n        workspace_name or workspace_id - alternative options defining\n            target workspace,\n        output_object_name - workspace object name (this parameter is\n            used together with one of workspace params from above)\n    */\n    typedef structure {\n        string workspace;\n        string output_object_name;\n        ReadsSet data;\n    } SaveReadsSetV1Params;\n\n\n    funcdef save_reads_set_v1(SaveReadsSetV1Params params)\n        returns (SaveSetV1Result result) authentication required;\n\n\n\n\n    /* ******* Assembly SET METHODS ************ */\n\n    /* NOTE: data type explicitly copied from KBaseSets so type and\n    API can evolve independently */\n\n    /*\n        The workspace ID for an Assembly object.\n        @id ws KBaseGenomeAnnotations.Assembly\n    */\n    typedef string ws_assembly_id;\n\n    /*\n        When saving an AssemblySet, only 'ref' is required.\n        You should never set 'info'; it is generated by the workspace.\n        Retrieve the 'info' for items in the set by setting the input parameter\n        'include_item_info' to 1 in the `get_***_set` query.\n        Retrieve the 'ref_path' for items in the set by setting the input parameter\n        'include_set_item_ref_paths' to 1 in the `get_***_set` query.\n    */\n    typedef structure {\n        ws_assembly_id ref;\n        ws_assembly_id ref_path;\n        string label;\n        Workspace.object_info info;\n    } AssemblySetItem;\n\n    /*\n        @meta ws description as description\n        @meta ws length(items) as item_count\n    */\n    typedef structure {\n        string description;\n        list<AssemblySetItem> items;\n    } AssemblySet;\n\n    typedef structure {\n        AssemblySet data;\n        Workspace.object_info info;\n    } GetAssemblySetV1Result;\n\n    funcdef get_assembly_set_v1(GetSetV1Params params)\n        returns (GetAssemblySetV1Result result) authentication optional;\n\n    /*\n        workspace_name or workspace_id - alternative options defining\n            target workspace,\n        output_object_name - workspace object name (this parameter is\n            used together with one of workspace params from above)\n    */\n    typedef structure {\n        string workspace;\n        string output_object_name;\n        AssemblySet data;\n    } SaveAssemblySetV1Params;\n\n\n    funcdef save_assembly_set_v1(SaveAssemblySetV1Params params)\n        returns (SaveSetV1Result result) authentication required;\n\n\n\n    /* ******* Genome SET METHODS ************ */\n\n    /* NOTE: data type explicitly copied from KBaseSets so type and\n    API can evolve independently */\n\n    /*\n        The workspace ID for a Genome object.\n        @id ws KBaseGenomes.Genome\n    */\n    typedef string ws_genome_id;\n\n    /*\n        When saving an GenomeSet, only 'ref' is required.\n        You should never set 'info'; it is generated by the workspace.\n        Retrieve the 'info' for items in the set by setting the input parameter\n        'include_item_info' to 1 in the `get_***_set` query.\n        Retrieve the 'ref_path' for items in the set by setting the input parameter\n        'include_set_item_ref_paths' to 1 in the `get_***_set` query.\n    */\n    typedef structure {\n        ws_genome_id ref;\n        ws_genome_id ref_path;\n        string label;\n        Workspace.object_info info;\n    } GenomeSetItem;\n\n    /*\n        optional 'elements' is only used to save 'KBaseSearch.GenomeSet' type\n        @meta ws description as description\n        @meta ws length(items) as item_count\n        @option elements\n    */\n    typedef structure {\n        string description;\n        list<GenomeSetItem> items;\n        mapping<string, GenomeSetItem> elements;\n    } GenomeSet;\n\n    typedef structure {\n        GenomeSet data;\n        Workspace.object_info info;\n    } GetGenomeSetV1Result;\n\n    funcdef get_genome_set_v1(GetSetV1Params params)\n        returns (GetGenomeSetV1Result result) authentication optional;\n\n    /*\n        workspace_name or workspace_id - alternative options defining\n            target workspace,\n        output_object_name - workspace object name (this parameter is\n            used together with one of workspace params from above)\n        save_search_set - default 'False', save 'KBaseSets.GenomeSet' data type\n                          if set 'True', save 'KBaseSearch.GenomeSet' data type\n    */\n    typedef structure {\n        string workspace;\n        string output_object_name;\n        GenomeSet data;\n        boolean save_search_set;\n    } SaveGenomeSetV1Params;\n\n\n    funcdef save_genome_set_v1(SaveGenomeSetV1Params params)\n        returns (SaveSetV1Result result) authentication required;\n\n\n    /* ******* Sample SET METHODS ************\n\n        Note: SampleSets can be retrieved using any of the `get_***_set` API calls;\n        at present there is no check that the set type returned matches the API method used.\n\n    */\n\n    typedef structure {\n        string ws_id;\n        string sampleset_id;\n        string sampleset_desc;\n        string domain;\n        string platform;\n        list<string> sample_ids;\n        list<string> condition;\n        string source;\n        string Library_type;\n        string publication_id;\n        string external_source_date;\n        string conditionset_ref;\n        mapping<string, string> sample_n_conditions;\n    } CreateRNASeqSampleSetParams;\n\n    funcdef create_sample_set(CreateRNASeqSampleSetParams params)\n        returns (SaveSetV1Result result) authentication required;\n\n    /*\n    KBaseSets.SampleSet Methods\n\n    column_sorting - tuple (column, ascending) - tuple of string, boolean where the former is the name of the column on which to sort, and the later is a boolean describing whether to sort ascending (true) or descending (false)\n\n    query   - string query to search against all searchable fields\n    ref     - string workspace reference of the sampleset object\n    sort_by - list of column_sorting in order of sorting, 0 index colum_sorting tuple highest level of sorting\n    start   - default 0  - starting index for pagination\n    limit   - default 10 - number of documents to retrieve starting from start pagination\n    */\n\n    typedef tuple<string column, boolean ascending> column_sorting;\n\n    typedef structure {\n        string query;\n        string ref;\n        list<column_sorting> sort_by;\n        int start;\n        int limit;\n    } SampleSetToSamplesInfoParams;\n\n    typedef structure {\n        int num_found;\n        int start;\n        string query;\n        list<UnspecifiedObject> samples;\n    } SampleSetToSamplesInfoResult;\n\n    funcdef sample_set_to_samples_info(SampleSetToSamplesInfoParams params)\n        returns (SampleSetToSamplesInfoResult result) authentication required;\n\n\n\n    /* ******* Generic SET METHODS ************ */\n\n\n    /*\n        - workspace: workspace name or ID (alternative to\n            workspaces parameter)\n\n        - workspaces: list of workspace names or IDs (alternative to\n            workspace parameter)\n\n        - include_metadata: flag for including metadata in the Set object info\n            and in the object info of the set items (it affects DP raw data as well)\n\n        - include_item_info - 1 or 0; if 1, the workspace info (with\n            metadata) for each object in the set is included.\n\n        - include_set_item_ref_paths - 1 or 0; if 1, provides ref_path for each item\n            in the set. The ref_path returned for each item is either\n\n            <ref_path_to_set>;<item_ref>\n\n            if ref_path_to_set is supplied or\n\n            <set_ref>;<item_ref>\n\n            if ref_path_to_set is not supplied.\n    */\n    typedef structure {\n        string workspace;\n        string workspaces;\n        boolean include_set_item_info;\n        boolean include_metadata;\n        boolean include_set_item_ref_paths;\n    } ListSetParams;\n\n    /*\n        ref_path is optionally returned by list_sets() and get_set_items(),\n        when the input parameter 'include_set_item_ref_paths' is set to 1.\n    */\n\n    typedef structure {\n        ws_obj_id ref;\n        ws_obj_id ref_path;\n        Workspace.object_info info;\n    } SetItemInfo;\n\n    /*\n        ref - the workspace object ref for the set\n        info - the Workspace object_info tuple for the set\n        items - the SetItemInfo for each of the items in the set\n    */\n    typedef structure {\n        ws_obj_id ref;\n        Workspace.object_info info;\n        list<SetItemInfo> items;\n    } SetInfo;\n\n\n    typedef structure {\n        list <SetInfo> sets;\n    } ListSetResult;\n\n    /* Use to get the top-level sets in a WS. Optionally can include\n    one level down members of those sets.\n    NOTE: DOES NOT PRESERVE ORDERING OF ITEM LIST IN DATA */\n\n    funcdef list_sets(ListSetParams params)\n        returns (ListSetResult result) authentication optional;\n\n\n    typedef structure {\n        ws_obj_id ref;\n        list <ws_obj_id> ref_path_to_set;\n    } SetReference;\n\n    /*\n        - set_refs: list of SetReferences for Set objects.\n\n        - include_set_item_ref_paths - 1 or 0; if 1, provides ref_path for each item\n            in the set. The ref_path returned for each item is either\n\n            <ref_path_to_set>;<item_ref>\n\n            if ref_path_to_set is supplied or\n\n            <set_ref>;<item_ref>\n\n            if ref_path_to_set is not supplied.\n     */\n\n    typedef structure {\n        list <SetReference> set_refs;\n        boolean include_set_item_ref_paths;\n    } GetSetItemsParams;\n\n    typedef structure {\n        list <SetInfo> sets;\n    } GetSetItemsResult;\n\n    /* Use to drill down into one or more sets, the position in the\n    return 'sets' list will match the position in the input ref list.\n    NOTE: DOES NOT PRESERVE ORDERING OF ITEM LIST IN DATA */\n    funcdef get_set_items(GetSetItemsParams params)\n        returns (GetSetItemsResult result) authentication optional;\n\n};\n","file_name":"SetAPI.spec","is_main":1},{"content":"/*\n\nThe Workspace Service (WSS) is primarily a language independent remote storage\nand retrieval system for KBase typed objects (TO) defined with the KBase\nInterface Description Language (KIDL). It has the following primary features:\n- Immutable storage of TOs with\n    - user defined metadata \n    - data provenance\n- Versioning of TOs\n- Referencing from TO to TO\n- Typechecking of all saved objects against a KIDL specification\n- Collecting typed objects into a workspace\n- Sharing workspaces with specific KBase users or the world\n- Freezing and publishing workspaces\n\n*/\nmodule Workspace {\n    \n    /* A boolean. 0 = false, other = true. */\n    typedef int boolean;\n    \n    /* The unique, permanent numerical ID of a workspace. */\n    typedef int ws_id;\n    \n    /* A string used as a name for a workspace.\n        Any string consisting of alphanumeric characters and \"_\", \".\", or \"-\"\n        that is not an integer is acceptable. The name may optionally be\n        prefixed with the workspace owner's user name and a colon, e.g.\n        kbasetest:my_workspace.\n    */\n    typedef string ws_name;\n    \n    /* Represents the permissions a user or users have to a workspace:\n    \n        'a' - administrator. All operations allowed.\n        'w' - read/write.\n        'r' - read.\n        'n' - no permissions.\n    */\n    typedef string permission;\n    \n    /* Login name of a KBase user account. */\n    typedef string username;\n    \n    /* \n        A time in the format YYYY-MM-DDThh:mm:ssZ, where Z is either the\n        character Z (representing the UTC timezone) or the difference\n        in time to UTC in the format +/-HHMM, eg:\n            2012-12-17T23:24:06-0500 (EST time)\n            2013-04-03T08:56:32+0000 (UTC time)\n            2013-04-03T08:56:32Z (UTC time)\n    */\n    typedef string timestamp;\n    \n    /* A Unix epoch (the time since 00:00:00 1/1/1970 UTC) in milliseconds. */\n    typedef int epoch; \n    \n    /* A type string.\n        Specifies the type and its version in a single string in the format\n        [module].[typename]-[major].[minor]:\n        \n        module - a string. The module name of the typespec containing the type.\n        typename - a string. The name of the type as assigned by the typedef\n            statement.\n        major - an integer. The major version of the type. A change in the\n            major version implies the type has changed in a non-backwards\n            compatible way.\n        minor - an integer. The minor version of the type. A change in the\n            minor version implies that the type has changed in a way that is\n            backwards compatible with previous type definitions.\n        \n        In many cases, the major and minor versions are optional, and if not\n        provided the most recent version will be used.\n        \n        Example: MyModule.MyType-3.1\n    */\n    typedef string type_string;\n    \n    /* An id type (e.g. from a typespec @id annotation: @id [idtype]) */\n    typedef string id_type;\n    \n    /* An id extracted from an object. */\n    typedef string extracted_id;\n    \n    /* User provided metadata about an object.\n        Arbitrary key-value pairs provided by the user.\n    */\n    typedef mapping<string, string> usermeta;\n    \n    /* The lock status of a workspace.\n        One of 'unlocked', 'locked', or 'published'.\n    */\n    typedef string lock_status;\n    \n    /* A workspace identifier.\n\n        Select a workspace by one, and only one, of the numerical id or name,\n            where the name can also be a KBase ID including the numerical id,\n            e.g. kb|ws.35.\n        ws_id id - the numerical ID of the workspace.\n        ws_name workspace - name of the workspace or the workspace ID in KBase\n            format, e.g. kb|ws.78.\n        \n    */\n    typedef structure {\n        ws_name workspace;\n        ws_id id;\n    } WorkspaceIdentity;\n    \n    /* Meta data associated with a workspace. Provided for backwards\n        compatibility. To be replaced by workspace_info.\n    \n        ws_name id - name of the workspace \n        username owner - name of the user who owns (who created) this workspace\n        timestamp moddate - date when the workspace was last modified\n        int objects - the approximate number of objects currently stored in\n            the workspace.\n        permission user_permission - permissions for the currently logged in\n            user for the workspace\n        permission global_permission - default permissions for the workspace\n            for all KBase users\n        ws_id num_id - numerical ID of the workspace\n        \n        @deprecated Workspace.workspace_info\n    */\n    typedef tuple<ws_name id, username owner, timestamp moddate,\n        int objects, permission user_permission, permission global_permission,\n        ws_id num_id> workspace_metadata;\n    \n    /* Information about a workspace.\n    \n        ws_id id - the numerical ID of the workspace.\n        ws_name workspace - name of the workspace.\n        username owner - name of the user who owns (e.g. created) this workspace.\n        timestamp moddate - date when the workspace was last modified.\n        int max_objid - the maximum object ID appearing in this workspace.\n            Since cloning a workspace preserves object IDs, this number may be\n            greater than the number of objects in a newly cloned workspace.\n        permission user_permission - permissions for the authenticated user of\n            this workspace.\n        permission globalread - whether this workspace is globally readable.\n        lock_status lockstat - the status of the workspace lock.\n        usermeta metadata - arbitrary user-supplied metadata about\n            the workspace.\n            \n    */\n    typedef tuple<ws_id id, ws_name workspace, username owner, timestamp moddate,\n        int max_objid, permission user_permission, permission globalread,\n        lock_status lockstat, usermeta metadata> workspace_info;\n        \n    /* The unique, permanent numerical ID of an object. */\n    typedef int obj_id;\n    \n    /* A string used as a name for an object.\n        Any string consisting of alphanumeric characters and the characters\n            |._- that is not an integer is acceptable.\n    */\n    typedef string obj_name;\n    \n    /* An object version.\n        The version of the object, starting at 1.\n    */\n    typedef int obj_ver;\n    \n    /* A string that uniquely identifies an object in the workspace service.\n    \n        There are two ways to uniquely identify an object in one string:\n        \"[ws_name or id]/[obj_name or id]/[obj_ver]\" - for example,\n            \"MyFirstWorkspace/MyFirstObject/3\" would identify the third version\n            of an object called MyFirstObject in the workspace called\n            MyFirstWorkspace. 42/Panic/1 would identify the first version of\n            the object name Panic in workspace with id 42. Towel/1/6 would\n            identify the 6th version of the object with id 1 in the Towel\n            workspace. \n        \"kb|ws.[ws_id].obj.[obj_id].ver.[obj_ver]\" - for example, \n            \"kb|ws.23.obj.567.ver.2\" would identify the second version of an\n            object with id 567 in a workspace with id 23.\n        In all cases, if the version number is omitted, the latest version of\n        the object is assumed.\n    */\n    typedef string obj_ref;\n    \n    /* An object identifier.\n        \n        Select an object by either:\n            One, and only one, of the numerical id or name of the workspace,\n            where the name can also be a KBase ID including the numerical id,\n            e.g. kb|ws.35.\n                ws_id wsid - the numerical ID of the workspace.\n                ws_name workspace - name of the workspace or the workspace ID\n                    in KBase format, e.g. kb|ws.78.\n            AND \n            One, and only one, of the numerical id or name of the object.\n                obj_id objid- the numerical ID of the object.\n                obj_name name - name of the object.\n            OPTIONALLY\n                obj_ver ver - the version of the object.\n        OR an object reference string:\n            obj_ref ref - an object reference string.\n    */\n    typedef structure {\n        ws_name workspace;\n        ws_id wsid;\n        obj_name name;\n        obj_id objid;\n        obj_ver ver;\n        obj_ref ref;\n    } ObjectIdentity;\n    \n    /* A chain of objects with references to one another.\n    \n        An object reference chain consists of a list of objects where the nth\n        object possesses a reference, either in the object itself or in the\n        object provenance, to the n+1th object.\n    */\n    typedef list<ObjectIdentity> ref_chain;\n    \n    /* A path into an object. \n        Identify a sub portion of an object by providing the path, delimited by\n        a slash (/), to that portion of the object. Thus the path may not have\n        slashes in the structure or mapping keys. Examples:\n        /foo/bar/3 - specifies the bar key of the foo mapping and the 3rd\n            entry of the array if bar maps to an array or the value mapped to\n            the string \"3\" if bar maps to a map.\n        /foo/bar/[*]/baz - specifies the baz field of all the objects in the\n            list mapped by the bar key in the map foo.\n        /foo/asterisk/baz - specifies the baz field of all the objects in the\n            values of the foo mapping. Swap 'asterisk' for * in the path.\n        In case you need to use '/' or '~' in path items use JSON Pointer \n            notation defined here: http://tools.ietf.org/html/rfc6901\n    */\n    typedef string object_path;\n    \n    /*  DEPRECATED\n    \n        An object subset identifier.\n        \n        Select a subset of an object by:\n        EITHER\n            One, and only one, of the numerical id or name of the workspace,\n            where the name can also be a KBase ID including the numerical id,\n            e.g. kb|ws.35.\n                ws_id wsid - the numerical ID of the workspace.\n                ws_name workspace - name of the workspace or the workspace ID\n                    in KBase format, e.g. kb|ws.78.\n            AND \n            One, and only one, of the numerical id or name of the object.\n                obj_id objid- the numerical ID of the object.\n                obj_name name - name of the object.\n            OPTIONALLY\n                obj_ver ver - the version of the object.\n        OR an object reference string:\n            obj_ref ref - an object reference string.\n        AND a subset specification:\n            list<object_path> included - the portions of the object to include\n                in the object subset.\n        boolean strict_maps - if true, throw an exception if the subset\n            specification traverses a non-existant map key (default false)\n        boolean strict_arrays - if true, throw an exception if the subset\n            specification exceeds the size of an array (default true)\n            \n        @deprecated Workspace.ObjectSpecification\n    */\n    typedef structure {\n        ws_name workspace;\n        ws_id wsid;\n        obj_name name;\n        obj_id objid;\n        obj_ver ver;\n        obj_ref ref;\n        list<object_path> included;\n        boolean strict_maps;\n        boolean strict_arrays;\n    } SubObjectIdentity;\n    \n    /* An Object Specification (OS). Inherits from ObjectIdentity.\n        Specifies which object, and which parts of that object, to retrieve\n        from the Workspace Service.\n        \n        The fields wsid, workspace, objid, name, ver, and ref are identical to\n        the ObjectIdentity fields.\n        \n        REFERENCE FOLLOWING:\n        \n        Reference following guarantees that a user that has access to an\n        object can always see a) objects that are referenced inside the object\n        and b) objects that are referenced in the object's provenance. This\n        ensures that the user has visibility into the entire provenance of the\n        object and the object's object dependencies (e.g. references).\n        \n        The user must have at least read access to the object specified in this\n        SO, but need not have access to any further objects in the reference\n        chain, and those objects may be deleted.\n        \n        Optional reference following fields:\n        ref_chain obj_path - a path to the desired object from the object\n            specified in this OS. In other words, the object specified in this\n            OS is assumed to be accessible to the user, and the objects in\n            the object path represent a chain of references to the desired\n            object at the end of the object path. If the references are all\n            valid, the desired object will be returned.\n        - OR -\n        list<obj_ref> obj_ref_path - shorthand for the obj_path. Only one of\n            obj_path or obj_ref_path may be specified.\n        \n        OBJECT SUBSETS:\n        \n        When selecting a subset of an array in an object, the returned\n        array is compressed to the size of the subset, but the ordering of\n        the array is maintained. For example, if the array stored at the\n        'feature' key of a Genome object has 4000 entries, and the object paths\n        provided are:\n            /feature/7\n            /feature/3015\n            /feature/700\n        The returned feature array will be of length three and the entries will\n        consist, in order, of the 7th, 700th, and 3015th entries of the\n        original array.\n        \n        Optional object subset fields:\n        list<object_path> included - the portions of the object to include\n                in the object subset.\n        boolean strict_maps - if true, throw an exception if the subset\n            specification traverses a non-existant map key (default false)\n        boolean strict_arrays - if true, throw an exception if the subset\n            specification exceeds the size of an array (default true)\n    */\n    typedef structure {\n        ws_name workspace;\n        ws_id wsid;\n        obj_name name;\n        obj_id objid;\n        obj_ver ver;\n        obj_ref ref;\n        ref_chain obj_path;\n        list<obj_ref> obj_ref_path;\n        list<object_path> included;\n        boolean strict_maps;\n        boolean strict_arrays;\n    } ObjectSpecification;\n    \n    /* Meta data associated with an object stored in a workspace. Provided for\n        backwards compatibility.\n    \n        obj_name id - name of the object.\n        type_string type - type of the object.\n        timestamp moddate - date when the object was saved\n        obj_ver instance - the version of the object\n        string command - Deprecated. Always returns the empty string.\n        username lastmodifier - name of the user who last saved the object,\n            including copying the object\n        username owner - Deprecated. Same as lastmodifier.\n        ws_name workspace - name of the workspace in which the object is\n            stored\n        string ref - Deprecated. Always returns the empty string.\n        string chsum - the md5 checksum of the object.\n        usermeta metadata - arbitrary user-supplied metadata about\n            the object.\n        obj_id objid - the numerical id of the object.\n        \n        @deprecated object_info\n    */\n    typedef tuple<obj_name id, type_string type, timestamp moddate,\n        int instance, string command, username lastmodifier, username owner,\n        ws_name workspace, string ref, string chsum, usermeta metadata,\n        obj_id objid> object_metadata;\n        \n    /* Information about an object, including user provided metadata.\n    \n        obj_id objid - the numerical id of the object.\n        obj_name name - the name of the object.\n        type_string type - the type of the object.\n        timestamp save_date - the save date of the object.\n        obj_ver ver - the version of the object.\n        username saved_by - the user that saved or copied the object.\n        ws_id wsid - the workspace containing the object.\n        ws_name workspace - the workspace containing the object.\n        string chsum - the md5 checksum of the object.\n        int size - the size of the object in bytes.\n        usermeta meta - arbitrary user-supplied metadata about\n            the object.\n\n    */\n    typedef tuple<obj_id objid, obj_name name, type_string type,\n        timestamp save_date, int version, username saved_by,\n        ws_id wsid, ws_name workspace, string chsum, int size, usermeta meta>\n        object_info;\n    \n    /* An external data unit. A piece of data from a source outside the\n        Workspace.\n        \n        On input, only one of the resource_release_date or\n        resource_release_epoch may be supplied. Both are supplied on output.\n        \n        string resource_name - the name of the resource, for example JGI.\n        string resource_url - the url of the resource, for example\n            http://genome.jgi.doe.gov\n        string resource_version - version of the resource\n        timestamp resource_release_date - the release date of the resource\n        epoch resource_release_epoch - the release date of the resource\n        string data_url - the url of the data, for example\n            http://genome.jgi.doe.gov/pages/dynamicOrganismDownload.jsf?\n                organism=BlaspURHD0036\n        string data_id - the id of the data, for example\n            7625.2.79179.AGTTCC.adnq.fastq.gz\n        string description - a free text description of the data.\n    \n    */\n    typedef structure {\n        string resource_name;\n        string resource_url;\n        string resource_version;\n        timestamp resource_release_date;\n        epoch resource_release_epoch;\n        string data_url;\n        string data_id;\n        string description;\n    } ExternalDataUnit;\n    \n    /* Information about a subaction that is invoked by a provenance action.\n    \n        A provenance action (PA) may invoke subactions (SA), e.g. calling a\n        separate piece of code, a service, or a script. In most cases these\n        calls are the same from PA to PA and so do not need to be listed in\n        the provenance since providing information about the PA alone provides\n        reproducibility.\n        \n        In some cases, however, SAs may change over time, such that invoking\n        the same PA with the same parameters may produce different results.\n        For example, if a PA calls a remote server, that server may be updated\n        between a PA invoked on day T and another PA invoked on day T+1.\n        \n        The SubAction structure allows for specifying information about SAs\n        that may dynamically change from PA invocation to PA invocation.\n        \n        string name - the name of the SA.\n        string ver - the version of SA.\n        string code_url - a url pointing to the SA's codebase.\n        string commit - a version control commit ID for the SA.\n        string endpoint_url - a url pointing to the access point for the SA -\n            a server url, for instance.\n    */\n    typedef structure {\n        string name;\n        string ver;\n        string code_url;\n        string commit;\n        string endpoint_url;\n    } SubAction;\n    \n    /* A provenance action.\n    \n        A provenance action (PA) is an action taken while transforming one data\n        object to another. There may be several PAs taken in series. A PA is\n        typically running a script, running an api command, etc. All of the\n        following fields are optional, but more information provided equates to\n        better data provenance.\n        \n        resolved_ws_objects should never be set by the user; it is set by the\n        workspace service when returning data.\n        \n        On input, only one of the time or epoch may be supplied. Both are\n        supplied on output.\n        \n        The maximum size of the entire provenance object, including all actions,\n        is 1MB.\n        \n        timestamp time - the time the action was started\n        epoch epoch - the time the action was started.\n        string caller - the name or id of the invoker of this provenance\n            action. In most cases, this will be the same for all PAs.\n        string service - the name of the service that performed this action.\n        string service_ver - the version of the service that performed this action.\n        string method - the method of the service that performed this action.\n        list<UnspecifiedObject> method_params - the parameters of the method\n            that performed this action. If an object in the parameters is a\n            workspace object, also put the object reference in the\n            input_ws_object list.\n        string script - the name of the script that performed this action.\n        string script_ver - the version of the script that performed this action.\n        string script_command_line - the command line provided to the script\n            that performed this action. If workspace objects were provided in\n            the command line, also put the object reference in the\n            input_ws_object list.\n        list<obj_ref> input_ws_objects - the workspace objects that\n            were used as input to this action; typically these will also be\n            present as parts of the method_params or the script_command_line\n            arguments.\n        list<obj_ref> resolved_ws_objects - the workspace objects ids from \n            input_ws_objects resolved to permanent workspace object references\n            by the workspace service.\n        list<string> intermediate_incoming - if the previous action produced \n            output that 1) was not stored in a referrable way, and 2) is\n            used as input for this action, provide it with an arbitrary and\n            unique ID here, in the order of the input arguments to this action.\n            These IDs can be used in the method_params argument.\n        list<string> intermediate_outgoing - if this action produced output\n            that 1) was not stored in a referrable way, and 2) is\n            used as input for the next action, provide it with an arbitrary and\n            unique ID here, in the order of the output values from this action.\n            These IDs can be used in the intermediate_incoming argument in the\n            next action.\n        list<ExternalDataUnit> external_data - data external to the workspace\n            that was either imported to the workspace or used to create a\n            workspace object.\n        list<SubAction> subactions - the subactions taken as a part of this\n            action.\n        mapping<string, string> custom - user definable custom provenance\n            fields and their values.\n        string description - a free text description of this action.\n    */\n    typedef structure {\n        timestamp time;\n        epoch epoch;\n        string caller;\n        string service;\n        string service_ver;\n        string method;\n        list<UnspecifiedObject> method_params;\n        string script;\n        string script_ver;\n        string script_command_line;\n        list<obj_ref> input_ws_objects;\n        list<obj_ref> resolved_ws_objects;\n        list<string> intermediate_incoming;\n        list<string> intermediate_outgoing;\n        list<ExternalDataUnit> external_data;\n        list<SubAction> subactions;\n        mapping<string, string> custom;\n        string description;\n    } ProvenanceAction;\n    \n    /*\n        Returns the version of the workspace service.\n    */\n    funcdef ver() returns(string ver) authentication none;\n\n    /* Input parameters for the \"create_workspace\" function.\n    \n        Required arguments:\n        ws_name workspace - name of the workspace to be created.\n        \n        Optional arguments:\n        permission globalread - 'r' to set the new workspace globally readable,\n            default 'n'.\n        string description - A free-text description of the new workspace, 1000\n            characters max. Longer strings will be mercilessly and brutally\n            truncated.\n        usermeta meta - arbitrary user-supplied metadata for the workspace.\n    */\n    typedef structure { \n        ws_name workspace;\n        permission globalread;\n        string description;\n        usermeta meta;\n    } CreateWorkspaceParams;\n    \n    /*\n        Creates a new workspace.\n    */\n    funcdef create_workspace(CreateWorkspaceParams params) returns\n        (workspace_info info) authentication required;\n    \n    /* Input parameters for the \"alter_workspace_metadata\" function.\n        \n        Required arguments:\n        WorkspaceIdentity wsi - the workspace to be altered\n        \n        One or both of the following arguments are required:\n        usermeta new - metadata to assign to the workspace. Duplicate keys will\n            be overwritten.\n        list<string> remove - these keys will be removed from the workspace\n            metadata key/value pairs.\n    */\n    typedef structure {\n        WorkspaceIdentity wsi;\n        usermeta new;\n        list<string> remove;\n    } AlterWorkspaceMetadataParams;\n    \n    /*\n        Change the metadata associated with a workspace.\n    */\n    funcdef alter_workspace_metadata(AlterWorkspaceMetadataParams params)\n        returns() authentication required;\n    \n    /* Input parameters for the \"clone_workspace\" function.\n    \n        Note that deleted objects are not cloned, although hidden objects are\n        and remain hidden in the new workspace.\n    \n        Required arguments:\n        WorkspaceIdentity wsi - the workspace to be cloned.\n        ws_name workspace - name of the workspace to be cloned into. This must\n            be a non-existant workspace name.\n        \n        Optional arguments:\n        permission globalread - 'r' to set the new workspace globally readable,\n            default 'n'.\n        string description - A free-text description of the new workspace, 1000\n            characters max. Longer strings will be mercilessly and brutally\n            truncated.\n        usermeta meta - arbitrary user-supplied metadata for the workspace.\n        list<ObjectIdentity> exclude - exclude the specified objects from the\n            cloned workspace. Either an object ID or a object name must be\n            specified in each ObjectIdentity - any supplied reference strings,\n            workspace names or IDs, and versions are ignored. \n    */\n    typedef structure { \n        WorkspaceIdentity wsi;\n        ws_name workspace;\n        permission globalread;\n        string description;\n        usermeta meta;\n        list<ObjectIdentity> exclude;\n    } CloneWorkspaceParams;\n    \n    /*\n        Clones a workspace.\n    */\n    funcdef clone_workspace(CloneWorkspaceParams params) returns\n        (workspace_info info) authentication required;\n    \n    /* Lock a workspace, preventing further changes.\n    \n        WARNING: Locking a workspace is permanent. A workspace, once locked,\n        cannot be unlocked.\n        \n        The only changes allowed for a locked workspace are changing user\n        based permissions or making a private workspace globally readable,\n        thus permanently publishing the workspace. A locked, globally readable\n        workspace cannot be made private.\n    */\n    funcdef lock_workspace(WorkspaceIdentity wsi) returns(workspace_info info)\n        authentication required;\n    \n    /* Input parameters for the \"get_workspacemeta\" function. Provided for\n        backwards compatibility.\n    \n        One, and only one of:\n        ws_name workspace - name of the workspace or the workspace ID in KBase\n            format, e.g. kb|ws.78.\n        ws_id id - the numerical ID of the workspace.\n            \n        Optional arguments:\n        string auth - the authentication token of the KBase account accessing\n            the workspace. Overrides the client provided authorization\n            credentials if they exist.\n        \n        @deprecated Workspace.WorkspaceIdentity\n    */\n    typedef structure { \n        ws_name workspace;\n        ws_id id;\n        string auth;\n    } get_workspacemeta_params;\n    \n    /*\n        Retrieves the metadata associated with the specified workspace.\n        Provided for backwards compatibility. \n        @deprecated Workspace.get_workspace_info\n    */\n    funcdef get_workspacemeta(get_workspacemeta_params params) \n        returns(workspace_metadata metadata) authentication optional;\n    \n    /*\n        Get information associated with a workspace.\n    */\n    funcdef get_workspace_info(WorkspaceIdentity wsi)\n        returns (workspace_info info) authentication optional;\n    \n    /* \n        Get a workspace's description.\n    */\n    funcdef get_workspace_description(WorkspaceIdentity wsi)\n        returns (string description) authentication optional;\n    \n    /* Input parameters for the \"set_permissions\" function.\n    \n        One, and only one, of the following is required:\n        ws_id id - the numerical ID of the workspace.\n        ws_name workspace - name of the workspace or the workspace ID in KBase\n            format, e.g. kb|ws.78.\n        \n        Required arguments:\n        permission new_permission - the permission to assign to the users.\n        list<username> users - the users whose permissions will be altered.\n    */\n    typedef structure {\n        ws_name workspace;\n        ws_id id;\n        permission new_permission;\n        list<username> users;\n    } SetPermissionsParams;\n    \n    /* \n        Set permissions for a workspace.\n    */\n    funcdef set_permissions(SetPermissionsParams params) returns()\n        authentication required;\n    \n    /* Input parameters for the \"set_global_permission\" function.\n    \n        One, and only one, of the following is required:\n        ws_id id - the numerical ID of the workspace.\n        ws_name workspace - name of the workspace or the workspace ID in KBase\n            format, e.g. kb|ws.78.\n        \n        Required arguments:\n        permission new_permission - the permission to assign to all users,\n            either 'n' or 'r'. 'r' means that all users will be able to read\n            the workspace; otherwise users must have specific permission to\n            access the workspace.\n    */\n    typedef structure {\n        ws_name workspace;\n        ws_id id;\n        permission new_permission;\n    } SetGlobalPermissionsParams;\n    \n    /* \n        Set the global permission for a workspace.\n    */\n    funcdef set_global_permission(SetGlobalPermissionsParams params) returns()\n        authentication required;\n    \n    /* Input parameters for the \"set_workspace_description\" function.\n    \n        One, and only one, of the following is required:\n        ws_id id - the numerical ID of the workspace.\n        ws_name workspace - name of the workspace or the workspace ID in KBase\n            format, e.g. kb|ws.78.\n        \n        Optional arguments:\n        string description - A free-text description of the workspace, 1000\n            characters max. Longer strings will be mercilessly and brutally\n            truncated. If omitted, the description is set to null.\n    */\n    typedef structure {\n        ws_name workspace;\n        ws_id id;\n        string description;\n    } SetWorkspaceDescriptionParams;\n    \n    /* \n        Set the description for a workspace.\n    */\n    funcdef set_workspace_description(SetWorkspaceDescriptionParams params)\n        returns() authentication required;\n    \n    /* Input parameters for the \"get_permissions_mass\" function.\n        workspaces - the workspaces for which to return the permissions,\n            maximum 1000.\n    */\n    typedef structure {\n        list<WorkspaceIdentity> workspaces;\n    } GetPermissionsMassParams;\n    \n    /* A set of workspace permissions.\n        perms - the list of permissions for each requested workspace\n    \n    */\n    typedef structure {\n        list<mapping<username, permission>> perms;\n    } WorkspacePermissions;\n    \n    /* \n        Get permissions for multiple workspaces.\n    */\n    funcdef get_permissions_mass(GetPermissionsMassParams mass)\n        returns(WorkspacePermissions perms) authentication optional;\n    \n    /* \n        Get permissions for a workspace.\n        @deprecated get_permissions_mass\n    */\n    funcdef get_permissions(WorkspaceIdentity wsi) returns\n        (mapping<username, permission> perms) authentication optional;\n    \n    /* Input parameters for the \"save_object\" function. Provided for backwards\n        compatibility.\n    \n        Required arguments:\n        type_string type - type of the object to be saved\n        ws_name workspace - name of the workspace where the object is to be\n            saved\n        obj_name id - name behind which the object will be saved in the\n            workspace\n        UnspecifiedObject data - data to be saved in the workspace\n        \n        Optional arguments:\n        usermeta metadata - arbitrary user-supplied metadata for the object,\n            not to exceed 16kb; if the object type specifies automatic\n            metadata extraction with the 'meta ws' annotation, and your\n            metadata name conflicts, then your metadata will be silently\n            overwritten.\n        string auth - the authentication token of the KBase account accessing\n            the workspace. Overrides the client provided authorization\n            credentials if they exist.\n        \n        @deprecated\n    */\n    typedef structure { \n        obj_name id;\n        type_string type;\n        UnspecifiedObject data;\n        ws_name workspace;\n        mapping<string,string> metadata;\n        string auth;\n    } save_object_params;\n    \n    /*\n        Saves the input object data and metadata into the selected workspace,\n            returning the object_metadata of the saved object. Provided\n            for backwards compatibility.\n            \n        @deprecated Workspace.save_objects\n    */\n    funcdef save_object(save_object_params params) \n        returns(object_metadata metadata) authentication optional;\n    \n    /* An object and associated data required for saving.\n    \n        Required arguments:\n        type_string type - the type of the object. Omit the version information\n            to use the latest version.\n        UnspecifiedObject data - the object data.\n        \n        Optional arguments:\n        One of an object name or id. If no name or id is provided the name\n            will be set to 'auto' with the object id appended as a string,\n            possibly with -\\d+ appended if that object id already exists as a\n            name.\n        obj_name name - the name of the object.\n        obj_id objid - the id of the object to save over.\n        usermeta meta - arbitrary user-supplied metadata for the object,\n            not to exceed 16kb; if the object type specifies automatic\n            metadata extraction with the 'meta ws' annotation, and your\n            metadata name conflicts, then your metadata will be silently\n            overwritten.\n        list<ProvenanceAction> provenance - provenance data for the object.\n        boolean hidden - true if this object should not be listed when listing\n            workspace objects.\n    \n    */\n    typedef structure {\n        type_string type;\n        UnspecifiedObject data;\n        obj_name name;\n        obj_id objid;\n        usermeta meta;\n        list<ProvenanceAction> provenance;\n        boolean hidden;\n    } ObjectSaveData;\n    \n    /* Input parameters for the \"save_objects\" function.\n    \n        One, and only one, of the following is required:\n        ws_id id - the numerical ID of the workspace.\n        ws_name workspace - name of the workspace or the workspace ID in KBase\n            format, e.g. kb|ws.78.\n        \n        Required arguments:\n        list<ObjectSaveData> objects - the objects to save.\n        \n    */\n    typedef structure {\n        ws_name workspace;\n        ws_id id;\n        list<ObjectSaveData> objects;\n    } SaveObjectsParams;\n    \n    /* \n        Save objects to the workspace. Saving over a deleted object undeletes\n        it.\n    */\n    funcdef save_objects(SaveObjectsParams params)\n        returns (list<object_info> info) authentication required;\n    \n    /* Input parameters for the \"get_object\" function. Provided for backwards\n        compatibility.\n    \n        Required arguments:\n        ws_name workspace - Name of the workspace containing the object to be\n            retrieved\n        obj_name id - Name of the object to be retrieved\n        \n        Optional arguments:\n        int instance - Version of the object to be retrieved, enabling\n            retrieval of any previous version of an object\n        string auth - the authentication token of the KBase account accessing\n            the object. Overrides the client provided authorization\n            credentials if they exist.\n        \n        @deprecated Workspace.ObjectIdentity    \n    */\n    typedef structure { \n        obj_name id;\n        ws_name workspace;\n        int instance;\n        string auth;\n    } get_object_params;\n    \n    /* Output generated by the \"get_object\" function. Provided for backwards\n        compatibility.\n    \n        UnspecifiedObject data - The object's data.\n        object_metadata metadata - Metadata for object retrieved/\n    \n        @deprecated Workspaces.ObjectData\n    */\n    typedef structure {\n        UnspecifiedObject data;\n        object_metadata metadata;\n    } get_object_output;\n    \n    /*\n        Retrieves the specified object from the specified workspace.\n        Both the object data and metadata are returned.\n        Provided for backwards compatibility.\n        \n        @deprecated Workspace.get_objects\n    */\n    funcdef get_object(get_object_params params)\n        returns (get_object_output output) authentication optional;\n    \n    /*  DEPRECATED\n    \n        The provenance and supplemental info for an object.\n    \n        object_info info - information about the object.\n        list<ProvenanceAction> provenance - the object's provenance.\n        username creator - the user that first saved the object to the\n            workspace.\n        ws_id orig_wsid - the id of the workspace in which this object was\n                originally saved. Missing for objects saved prior to version\n                0.4.1.\n        timestamp created - the date the object was first saved to the\n            workspace.\n        epoch epoch - the date the object was first saved to the\n            workspace.\n        list<obj_ref> - the references contained within the object.\n        obj_ref copied - the reference of the source object if this object is\n            a copy and the copy source exists and is accessible.\n            null otherwise.\n        boolean copy_source_inaccessible - true if the object was copied from\n            another object, but that object is no longer accessible to the\n            user. False otherwise.\n        mapping<id_type, list<extracted_id>> extracted_ids - any ids extracted\n            from the object.\n        string handle_error - if an error occurs while setting ACLs on\n            embedded handle IDs, it will be reported here.\n        string handle_stacktrace - the stacktrace for handle_error.\n        \n        @deprecated\n    */\n    typedef structure {\n        object_info info;\n        list<ProvenanceAction> provenance;\n        username creator;\n        ws_id orig_wsid;\n        timestamp created;\n        epoch epoch;\n        list<obj_ref> refs;\n        obj_ref copied;\n        boolean copy_source_inaccessible;\n        mapping<id_type, list<extracted_id>> extracted_ids;\n        string handle_error;\n        string handle_stacktrace;\n    } ObjectProvenanceInfo;\n    \n    /*  DEPRECATED\n        Get object provenance from the workspace.\n        \n        @deprecated Workspace.get_objects2\n    */\n    funcdef get_object_provenance(list<ObjectIdentity> object_ids)\n        returns (list<ObjectProvenanceInfo> data) authentication optional;\n    \n    /* The data and supplemental info for an object.\n    \n        UnspecifiedObject data - the object's data or subset data.\n        object_info info - information about the object.\n        list<ProvenanceAction> provenance - the object's provenance.\n        username creator - the user that first saved the object to the\n            workspace.\n        ws_id orig_wsid - the id of the workspace in which this object was\n                originally saved. Missing for objects saved prior to version\n                0.4.1.\n        timestamp created - the date the object was first saved to the\n            workspace.\n        epoch epoch - the date the object was first saved to the\n            workspace.\n        list<obj_ref> - the references contained within the object.\n        obj_ref copied - the reference of the source object if this object is\n            a copy and the copy source exists and is accessible.\n            null otherwise.\n        boolean copy_source_inaccessible - true if the object was copied from\n            another object, but that object is no longer accessible to the\n            user. False otherwise.\n        mapping<id_type, list<extracted_id>> extracted_ids - any ids extracted\n            from the object.\n        string handle_error - if an error occurs while setting ACLs on\n            embedded handle IDs, it will be reported here.\n        string handle_stacktrace - the stacktrace for handle_error.\n        \n    */\n    typedef structure {\n        UnspecifiedObject data;\n        object_info info;\n        list<ProvenanceAction> provenance;\n        username creator;\n        ws_id orig_wsid;\n        timestamp created;\n        epoch epoch;\n        list<obj_ref> refs;\n        obj_ref copied;\n        boolean copy_source_inaccessible;\n        mapping<id_type, list<extracted_id>> extracted_ids;\n        string handle_error;\n        string handle_stacktrace;\n    } ObjectData;\n    \n    /*  DEPRECATED\n        Get objects from the workspace.\n        @deprecated Workspace.get_objects2\n    */\n    funcdef get_objects(list<ObjectIdentity> object_ids)\n        returns (list<ObjectData> data) authentication optional;\n    \n    /* Input parameters for the get_objects2 function.\n    \n        Required parameters:\n        list<ObjectSpecification> objects - the list of object specifications\n            for the objects to return (via reference chain and as a subset if\n            specified).\n            \n        Optional parameters:\n        boolean ignoreErrors - Don't throw an exception if an object cannot\n            be accessed; return null for that object's information instead.\n            Default false.\n        boolean no_data - return the provenance, references, and\n            object_info for this object without the object data. Default false.\n    */\n    typedef structure {\n        list<ObjectSpecification> objects;\n        boolean ignoreErrors;\n        boolean no_data;\n    } GetObjects2Params;\n    \n    /* Results from the get_objects2 function.\n    \n        list<ObjectData> data - the returned objects.\n    */\n    typedef structure {\n        list<ObjectData> data;\n    } GetObjects2Results;\n    \n    /* Get objects from the workspace. */\n    funcdef get_objects2(GetObjects2Params params)\n        returns(GetObjects2Results results) authentication optional;\n    \n    /*  DEPRECATED\n        Get portions of objects from the workspace.\n        \n        When selecting a subset of an array in an object, the returned\n        array is compressed to the size of the subset, but the ordering of\n        the array is maintained. For example, if the array stored at the\n        'feature' key of a Genome object has 4000 entries, and the object paths\n        provided are:\n            /feature/7\n            /feature/3015\n            /feature/700\n        The returned feature array will be of length three and the entries will\n        consist, in order, of the 7th, 700th, and 3015th entries of the\n        original array.\n        @deprecated Workspace.get_objects2\n    */\n    funcdef get_object_subset(list<SubObjectIdentity> sub_object_ids)\n        returns (list<ObjectData> data) authentication optional;\n        \n    /* \n        Get an object's history. The version argument of the ObjectIdentity is\n        ignored.\n    */\n    funcdef get_object_history(ObjectIdentity object)\n         returns (list<object_info> history) authentication optional;\n    \n    /* \n        List objects that reference one or more specified objects. References\n        in the deleted state are not returned.\n    */\n    funcdef list_referencing_objects(list<ObjectIdentity> object_ids)\n        returns (list<list<object_info>> referrers) authentication optional;\n        \n    /*\n        DEPRECATED\n\n        List the number of times objects have been referenced.\n        \n        This count includes both provenance and object-to-object references\n        and, unlike list_referencing_objects, includes objects that are\n        inaccessible to the user.\n        \n        @deprecated\n    */\n    funcdef list_referencing_object_counts(list<ObjectIdentity> object_ids)\n        returns (list<int> counts) authentication optional;\n    \n    /*  DEPRECATED\n    \n        Get objects by references from other objects.\n    \n        NOTE: In the vast majority of cases, this method is not necessary and\n        get_objects should be used instead. \n        \n        get_referenced_objects guarantees that a user that has access to an\n        object can always see a) objects that are referenced inside the object\n        and b) objects that are referenced in the object's provenance. This\n        ensures that the user has visibility into the entire provenance of the\n        object and the object's object dependencies (e.g. references).\n        \n        The user must have at least read access to the first object in each\n        reference chain, but need not have access to any further objects in\n        the chain, and those objects may be deleted.\n        \n        @deprecated Workspace.get_objects2\n    \n    */\n    funcdef get_referenced_objects(list<ref_chain> ref_chains)\n        returns (list<ObjectData> data) authentication optional;\n        \n    /* \n        Input parameters for the \"list_workspaces\" function. Provided for\n        backwards compatibility.\n        \n        Optional parameters:\n        string auth - the authentication token of the KBase account accessing\n            the list of workspaces. Overrides the client provided authorization\n            credentials if they exist.\n        boolean excludeGlobal - if excludeGlobal is true exclude world\n            readable workspaces. Defaults to false.\n        \n        @deprecated Workspace.ListWorkspaceInfoParams\n    */\n    typedef structure { \n        string auth;\n        boolean excludeGlobal;\n    } list_workspaces_params;\n    \n    /*\n        Lists the metadata of all workspaces a user has access to. Provided for\n        backwards compatibility - to be replaced by the functionality of\n        list_workspace_info\n        \n        @deprecated Workspace.list_workspace_info\n    */\n    funcdef list_workspaces(list_workspaces_params params)\n        returns (list<workspace_metadata> workspaces) authentication optional;\n    \n    /* \n        Input parameters for the \"list_workspace_info\" function.\n        \n        Only one of each timestamp/epoch pair may be supplied.\n        \n        Optional parameters:\n        permission perm - filter workspaces by minimum permission level. 'None'\n            and 'readable' are ignored.\n        list<username> owners - filter workspaces by owner.\n        usermeta meta - filter workspaces by the user supplied metadata. NOTE:\n            only one key/value pair is supported at this time. A full map\n            is provided as input for the possibility for expansion in the\n            future.\n        timestamp after - only return workspaces that were modified after this\n            date.\n        timestamp before - only return workspaces that were modified before\n            this date.\n        epoch after_epoch - only return workspaces that were modified after\n            this date.\n        epoch before_epoch - only return workspaces that were modified before\n            this date.\n        boolean excludeGlobal - if excludeGlobal is true exclude world\n            readable workspaces. Defaults to false.\n        boolean showDeleted - show deleted workspaces that are owned by the\n            user.\n        boolean showOnlyDeleted - only show deleted workspaces that are owned\n            by the user.\n        \n    */\n    typedef structure { \n        permission perm;\n        list<username> owners;\n        usermeta meta;\n        timestamp after;\n        timestamp before;\n        epoch after_epoch;\n        epoch before_epoch;\n        boolean excludeGlobal;\n        boolean showDeleted;\n        boolean showOnlyDeleted;\n    } ListWorkspaceInfoParams;\n    \n    /*\n        List workspaces viewable by the user.\n     */\n    funcdef list_workspace_info(ListWorkspaceInfoParams params)\n        returns(list<workspace_info> wsinfo) authentication optional;\n    \n    /* Input parameters for the \"list_workspace_objects\" function. Provided\n        for backwards compatibility.\n        \n        Required arguments:\n        ws_name workspace - Name of the workspace for which objects should be\n            listed\n        \n        Optional arguments:\n        type_string type - type of the objects to be listed. Here, omitting\n            version information will find any objects that match the provided\n            type - e.g. Foo.Bar-0 will match Foo.Bar-0.X where X is any\n            existing version.\n        boolean showDeletedObject - show objects that have been deleted\n        string auth - the authentication token of the KBase account requesting\n            access. Overrides the client provided authorization credentials if\n            they exist.\n            \n        @deprecated Workspace.ListObjectsParams\n    */\n    typedef structure { \n       ws_name workspace;\n       type_string type;\n       boolean showDeletedObject;\n       string auth;\n    } list_workspace_objects_params;\n    \n    /*\n        Lists the metadata of all objects in the specified workspace with the\n        specified type (or with any type). Provided for backwards compatibility.\n        \n        @deprecated Workspace.list_objects\n    */\n    funcdef list_workspace_objects(list_workspace_objects_params params)\n        returns(list<object_metadata> objects) authentication optional;\n    \n    /* Parameters for the 'list_objects' function.\n\n        At least one of the following filters must be provided. It is strongly\n        recommended that the list is restricted to the workspaces of interest,\n        or the results may be very large:\n        list<ws_id> ids - the numerical IDs of the workspaces of interest.\n        list<ws_name> workspaces - names of the workspaces of interest or the\n            workspace IDs in KBase format, e.g. kb|ws.78.\n        type_string type - type of the objects to be listed.  Here, omitting\n            version information will find any objects that match the provided\n            type - e.g. Foo.Bar-0 will match Foo.Bar-0.X where X is any\n            existing version.\n        \n        Only one of each timestamp/epoch pair may be supplied.\n        \n        Optional arguments:\n        permission perm - filter objects by minimum permission level. 'None'\n            and 'readable' are ignored.\n        list<username> savedby - filter objects by the user that saved or\n            copied the object.\n        usermeta meta - filter objects by the user supplied metadata. NOTE:\n            only one key/value pair is supported at this time. A full map\n            is provided as input for the possibility for expansion in the\n            future.\n        timestamp after - only return objects that were created after this\n            date.\n        timestamp before - only return objects that were created before this\n            date.\n        epoch after_epoch - only return objects that were created after this\n            date.\n        epoch before_epoch - only return objects that were created before this\n            date.\n        obj_id minObjectID - only return objects with an object id greater or\n            equal to this value.\n        obj_id maxObjectID - only return objects with an object id less than or\n            equal to this value.\n        boolean showDeleted - show deleted objects in workspaces to which the\n            user has write access.\n        boolean showOnlyDeleted - only show deleted objects in workspaces to\n            which the user has write access.\n        boolean showHidden - show hidden objects.\n        boolean showAllVersions - show all versions of each object that match\n            the filters rather than only the most recent version.\n        boolean includeMetadata - include the user provided metadata in the\n            returned object_info. If false (0 or null), the default, the\n            metadata will be null.\n        boolean excludeGlobal - exclude objects in global workspaces. This\n            parameter only has an effect when filtering by types alone.\n        int limit - limit the output to X objects. Default and maximum value\n            is 10000. Limit values < 1 are treated as 10000, the default.\n        \n    */\n    typedef structure {\n        list<ws_name> workspaces;\n        list<ws_id> ids;\n        type_string type;\n        permission perm;\n        list<username> savedby;\n        usermeta meta;\n        timestamp after;\n        timestamp before;\n        epoch after_epoch;\n        epoch before_epoch;\n        obj_id minObjectID;\n        obj_id maxObjectID;\n        boolean showDeleted;\n        boolean showOnlyDeleted;\n        boolean showHidden;\n        boolean showAllVersions;\n        boolean includeMetadata;\n        boolean excludeGlobal;\n        int limit;\n    } ListObjectsParams;\n    \n    /*\n        List objects in one or more workspaces.\n    */\n    funcdef list_objects(ListObjectsParams params)\n        returns(list<object_info> objinfo) authentication optional;\n    \n    /* Input parameters for the \"get_objectmeta\" function.\n    \n        Required arguments:\n        ws_name workspace - name of the workspace containing the object for\n             which metadata is to be retrieved\n        obj_name id - name of the object for which metadata is to be retrieved\n        \n        Optional arguments:\n        int instance - Version of the object for which metadata is to be\n             retrieved, enabling retrieval of any previous version of an object\n        string auth - the authentication token of the KBase account requesting\n            access. Overrides the client provided authorization credentials if\n            they exist.\n            \n        @deprecated Workspace.ObjectIdentity\n    */\n    typedef structure { \n        obj_name id;\n        ws_name workspace;\n        int instance;\n        string auth;\n    } get_objectmeta_params;\n    \n    /*\n        Retrieves the metadata for a specified object from the specified\n        workspace. Provides access to metadata for all versions of the object\n        via the instance parameter. Provided for backwards compatibility.\n        \n        @deprecated Workspace.get_object_info\n    */\n    funcdef get_objectmeta(get_objectmeta_params params) \n        returns(object_metadata metadata) authentication optional; \n    \n    /* \n        Get information about objects from the workspace.\n        \n        Set includeMetadata true to include the user specified metadata.\n        Otherwise the metadata in the object_info will be null.\n        \n        This method will be replaced by the behavior of get_object_info_new\n        in the future.\n        \n        @deprecated Workspace.get_object_info_new\n    */\n    funcdef get_object_info(list<ObjectIdentity> object_ids,\n        boolean includeMetadata) returns (list<object_info> info)\n        authentication optional;\n    \n    /* Input parameters for the \"get_object_info_new\" function.\n    \n        Required arguments:\n        list<ObjectSpecification> objects - the objects for which the\n            information should be fetched. Subsetting related parameters are\n            ignored.\n        \n        Optional arguments:\n        boolean includeMetadata - include the object metadata in the returned\n            information. Default false.\n        boolean ignoreErrors - Don't throw an exception if an object cannot\n            be accessed; return null for that object's information instead.\n            Default false.\n            \n    */\n    typedef structure { \n        list<ObjectSpecification> objects;\n        boolean includeMetadata;\n        boolean ignoreErrors;\n    } GetObjectInfoNewParams;\n    \n    /* \n        Get information about objects from the workspace.\n        \n    */\n    funcdef get_object_info_new(GetObjectInfoNewParams params)\n        returns (list<object_info> info) authentication optional;\n    \n    /* Input parameters for the 'rename_workspace' function.\n        \n        Required arguments:\n        WorkspaceIdentity wsi - the workspace to rename.\n        ws_name new_name - the new name for the workspace.\n    */\n    typedef structure {\n        WorkspaceIdentity wsi;\n        ws_name new_name;\n    } RenameWorkspaceParams;\n    \n    /* \n        Rename a workspace.\n    */\n    funcdef rename_workspace(RenameWorkspaceParams params)\n        returns(workspace_info renamed) authentication required;\n    \n    /* Input parameters for the 'rename_object' function.\n        \n        Required arguments:\n        ObjectIdentity obj - the object to rename.\n        obj_name new_name - the new name for the object.\n    */\n    typedef structure {\n        ObjectIdentity obj;\n        obj_name new_name;\n    } RenameObjectParams;\n    \n    /* \n        Rename an object. User meta data is always returned as null.\n    */\n    funcdef rename_object(RenameObjectParams params)\n        returns(object_info renamed) authentication required;\n        \n    /* Input parameters for the 'copy_object' function. \n    \n        If the 'from' ObjectIdentity includes no version and the object is\n        copied to a new name, the entire version history of the object is\n        copied. In all other cases only the version specified, or the latest\n        version if no version is specified, is copied.\n        \n        The version from the 'to' ObjectIdentity is always ignored.\n        \n        Required arguments:\n        ObjectIdentity from - the object to copy.\n        ObjectIdentity to - where to copy the object.\n    */\n    typedef structure {\n        ObjectIdentity from;\n        ObjectIdentity to;\n    } CopyObjectParams;\n    \n    /* \n        Copy an object. Returns the object_info for the newest version.\n    */\n    funcdef copy_object(CopyObjectParams params)\n        returns(object_info copied) authentication required;\n    \n    /* Revert an object.\n    \n        The object specified in the ObjectIdentity is reverted to the version\n        specified in the ObjectIdentity. \n    */\n    funcdef revert_object(ObjectIdentity object)\n        returns(object_info reverted) authentication required;\n    \n    /* Input parameters for the get_names_by_prefix function.\n    \n        Required arguments:\n        list<WorkspaceIdentity> workspaces - the workspaces to search.\n        string prefix - the prefix of the object names to return.\n        \n        Optional arguments:\n        boolean includeHidden - include names of hidden objects in the results.\n            Default false.\n    */\n    typedef structure {\n        list<WorkspaceIdentity> workspaces;\n        string prefix;\n        boolean includeHidden;\n    } GetNamesByPrefixParams;\n    \n    /* Results object for the get_names_by_prefix function.\n    \n        list<list<obj_name>> names - the names matching the provided prefix,\n            listed in order of the input workspaces.\n    */\n    typedef structure {\n        list<list<obj_name>> names;\n    } GetNamesByPrefixResults;\n    \n    /*\n        Get object names matching a prefix. At most 1000 names are returned.\n        No particular ordering is guaranteed, nor is which names will be\n        returned if more than 1000 are found.\n        \n        This function is intended for use as an autocomplete helper function.\n    */\n    funcdef get_names_by_prefix(GetNamesByPrefixParams params)\n        returns(GetNamesByPrefixResults res) authentication optional;\n    \n    /* \n        Hide objects. All versions of an object are hidden, regardless of\n        the version specified in the ObjectIdentity. Hidden objects do not\n        appear in the list_objects method.\n    */\n    funcdef hide_objects(list<ObjectIdentity> object_ids) returns()\n        authentication required;\n    \n    /* \n        Unhide objects. All versions of an object are unhidden, regardless\n        of the version specified in the ObjectIdentity.\n    */\n    funcdef unhide_objects(list<ObjectIdentity> object_ids) returns()\n        authentication required;\n    \n    /* \n        Delete objects. All versions of an object are deleted, regardless of\n        the version specified in the ObjectIdentity.\n    */\n    funcdef delete_objects(list<ObjectIdentity> object_ids) returns()\n        authentication required;\n    \n    /* \n        Undelete objects. All versions of an object are undeleted, regardless\n        of the version specified in the ObjectIdentity. If an object is not\n        deleted, no error is thrown.\n    */\n    funcdef undelete_objects(list<ObjectIdentity> object_ids) returns()\n        authentication required;\n    \n    /*\n        Delete a workspace. All objects contained in the workspace are deleted.\n    */\n    funcdef delete_workspace(WorkspaceIdentity wsi) returns()\n        authentication required;\n    \n    /* \n        Undelete a workspace. All objects contained in the workspace are\n        undeleted, regardless of their state at the time the workspace was\n        deleted.\n    */\n    funcdef undelete_workspace(WorkspaceIdentity wsi) returns()\n        authentication required;\n    \n    /* **************** Type registering functions ******************** */\n    \n    /* A type specification (typespec) file in the KBase Interface Description\n        Language (KIDL).\n    */\n    typedef string typespec;\n     \n    /* A module name defined in a KIDL typespec. */\n    typedef string modulename;\n    \n    /* A type definition name in a KIDL typespec. */\n    typedef string typename;\n    \n    /* A version of a type. \n        Specifies the version of the type  in a single string in the format\n        [major].[minor]:\n        \n        major - an integer. The major version of the type. A change in the\n            major version implies the type has changed in a non-backwards\n            compatible way.\n        minor - an integer. The minor version of the type. A change in the\n            minor version implies that the type has changed in a way that is\n            backwards compatible with previous type definitions.\n    */\n    typedef string typever;\n\n    /* A function string for referencing a funcdef.\n        Specifies the function and its version in a single string in the format\n        [modulename].[funcname]-[major].[minor]:\n        \n        modulename - a string. The name of the module containing the function.\n        funcname - a string. The name of the function as assigned by the funcdef\n            statement.\n        major - an integer. The major version of the function. A change in the\n            major version implies the function has changed in a non-backwards\n            compatible way.\n        minor - an integer. The minor version of the function. A change in the\n            minor version implies that the function has changed in a way that is\n            backwards compatible with previous function definitions.\n        \n        In many cases, the major and minor versions are optional, and if not\n        provided the most recent version will be used.\n        \n        Example: MyModule.MyFunc-3.1\n    */\n    typedef string func_string;\n    \n    /* The version of a typespec file. */\n    typedef int spec_version;\n    \n    /* The JSON Schema (v4) representation of a type definition. */\n    typedef string jsonschema;\n    \n    /* Request ownership of a module name. A Workspace administrator\n        must approve the request.\n    */\n    funcdef request_module_ownership(modulename mod) returns()\n        authentication required;\n    \n    /* Parameters for the register_typespec function.\n    \n        Required arguments:\n        One of:\n        typespec spec - the new typespec to register.\n        modulename mod - the module to recompile with updated options (see below).\n        \n        Optional arguments:\n        boolean dryrun - Return, but do not save, the results of compiling the \n            spec. Default true. Set to false for making permanent changes.\n        list<typename> new_types - types in the spec to make available in the\n            workspace service. When compiling a spec for the first time, if\n            this argument is empty no types will be made available. Previously\n            available types remain so upon recompilation of a spec or\n            compilation of a new spec.\n        list<typename> remove_types - no longer make these types available in\n            the workspace service for the new version of the spec. This does\n            not remove versions of types previously compiled.\n        mapping<modulename, spec_version> dependencies - By default, the\n            latest released versions of spec dependencies will be included when\n            compiling a spec. Specific versions can be specified here.\n        spec_version prev_ver - the id of the previous version of the typespec.\n            An error will be thrown if this is set and prev_ver is not the\n            most recent version of the typespec. This prevents overwriting of\n            changes made since retrieving a spec and compiling an edited spec.\n            This argument is ignored if a modulename is passed.\n    */\n    typedef structure {\n        typespec spec;\n        modulename mod;\n        list<typename> new_types;\n        list<typename> remove_types;\n        mapping<modulename, spec_version> dependencies;\n        boolean dryrun;\n        spec_version prev_ver;\n    } RegisterTypespecParams;\n    \n    /* Register a new typespec or recompile a previously registered typespec\n        with new options.\n        See the documentation of RegisterTypespecParams for more details.\n        Also see the release_types function.\n    */\n    funcdef register_typespec(RegisterTypespecParams params)\n        returns (mapping<type_string,jsonschema>) authentication required;\n    \n    /* Parameters for the register_typespec_copy function.\n    \n        Required arguments:\n        string external_workspace_url - the URL of the  workspace server from\n            which to copy a typespec.\n        modulename mod - the name of the module in the workspace server\n        \n        Optional arguments:\n        spec_version version - the version of the module in the workspace\n            server\n\n    */\n    typedef structure {\n        string external_workspace_url;\n        modulename mod;\n        spec_version version;\n    } RegisterTypespecCopyParams;\n    \n    /* Register a copy of new typespec or refresh an existing typespec which is\n        loaded from another workspace for synchronization. Method returns new\n        version of module in current workspace.\n        \n        Also see the release_types function.\n    */\n    funcdef register_typespec_copy(RegisterTypespecCopyParams params)\n        returns(spec_version new_local_version) authentication required;\n    \n    /* Release a module for general use of its types.\n        \n        Releases the most recent version of a module. Releasing a module does\n        two things to the module's types:\n        1) If a type's major version is 0, it is changed to 1. A major\n            version of 0 implies that the type is in development and may have\n            backwards incompatible changes from minor version to minor version.\n            Once a type is released, backwards incompatible changes always\n            cause a major version increment.\n        2) This version of the type becomes the default version, and if a \n            specific version is not supplied in a function call, this version\n            will be used. This means that newer, unreleased versions of the\n            type may be skipped.\n    */\n    funcdef release_module(modulename mod) returns(list<type_string> types)\n        authentication required;\n    \n    /* Parameters for the list_modules() function.\n    \n        Optional arguments:\n        username owner - only list modules owned by this user.\n    */\n    typedef structure {\n        username owner;\n    } ListModulesParams;\n    \n    /* List typespec modules. */\n    funcdef list_modules(ListModulesParams params)\n        returns(list<modulename> modules) authentication none;\n    \n    /* Parameters for the list_module_versions function.\n    \n        Required arguments:\n        One of:\n        modulename mod - returns all versions of the module.\n        type_string type - returns all versions of the module associated with\n            the type.\n    */\n    typedef structure {\n        modulename mod;\n        type_string type;\n    } ListModuleVersionsParams;\n    \n    /* A set of versions from a module.\n    \n        modulename mod - the name of the module.\n        list<spec_version> - a set or subset of versions associated with the\n            module.\n        list<spec_version> - a set or subset of released versions associated \n            with the module.\n    */\n    typedef structure {\n        modulename mod;\n        list<spec_version> vers;\n        list<spec_version> released_vers;\n    } ModuleVersions;\n    \n    /* List typespec module versions. */\n    funcdef list_module_versions(ListModuleVersionsParams params)\n         returns(ModuleVersions vers) authentication optional;\n    \n    /* Parameters for the get_module_info function.\n    \n        Required arguments:\n        modulename mod - the name of the module to retrieve.\n        \n        Optional arguments:\n        spec_version ver - the version of the module to retrieve. Defaults to\n            the latest version.\n    */\n    typedef structure {\n        modulename mod;\n        spec_version ver;\n    } GetModuleInfoParams;\n    \n    /* Information about a module.\n    \n        list<username> owners - the owners of the module.\n        spec_version ver - the version of the module.\n        typespec spec - the typespec.\n        string description - the description of the module from the typespec.\n        mapping<type_string, jsonschema> types - the types associated with this\n            module and their JSON schema.\n        mapping<modulename, spec_version> included_spec_version - names of \n            included modules associated with their versions.\n        string chsum - the md5 checksum of the object.\n        list<func_string> functions - list of names of functions registered in spec.\n        boolean is_released - shows if this version of module was released (and\n            hence can be seen by others).\n    */\n    typedef structure {\n        list<username> owners;\n        spec_version ver;\n        typespec spec;\n        string description;\n        mapping<type_string, jsonschema> types;\n        mapping<modulename, spec_version> included_spec_version;\n        string chsum;\n        list<func_string> functions;\n        boolean is_released;\n    } ModuleInfo;\n    \n    funcdef get_module_info(GetModuleInfoParams params)\n        returns(ModuleInfo info) authentication optional;\n        \n    /* Get JSON schema for a type. */\n    funcdef get_jsonschema(type_string type) returns(jsonschema schema)\n        authentication optional;\n\n    /* Translation from types qualified with MD5 to their semantic versions */\n    funcdef translate_from_MD5_types(list<type_string> md5_types) \n        returns(mapping<type_string, list<type_string>> sem_types)\n        authentication none;\n\n    /* Translation from types qualified with semantic versions to their MD5'ed versions */\n    funcdef translate_to_MD5_types(list<type_string> sem_types) \n        returns(mapping<type_string, type_string> md5_types)\n        authentication optional;\n\n    /* Information about a type\n    \n        type_string type_def - resolved type definition id.\n        string description - the description of the type from spec file.\n        string spec_def - reconstruction of type definition from spec file.\n        jsonschema json_schema - JSON schema of this type.\n        string parsing_structure - json document describing parsing structure of type \n            in spec file including involved sub-types.\n        list<spec_version> module_vers - versions of spec-files containing\n            given type version.\n        list<spec_version> released_module_vers - versions of released spec-files \n            containing given type version.\n        list<type_string> type_vers - all versions of type with given type name.\n        list<type_string> released_type_vers - all released versions of type with \n            given type name.\n        list<func_string> using_func_defs - list of functions (with versions)\n            referring to this type version.\n        list<type_string> using_type_defs - list of types (with versions)\n            referring to this type version.\n        list<type_string> used_type_defs - list of types (with versions) \n            referred from this type version.\n    */\n    typedef structure {\n        type_string type_def;\n        string description;\n        string spec_def;\n        jsonschema json_schema;\n        string parsing_structure;\n        list<spec_version> module_vers;\n        list<spec_version> released_module_vers;\n        list<type_string> type_vers;\n        list<type_string> released_type_vers;\n        list<func_string> using_func_defs;\n        list<type_string> using_type_defs;\n        list<type_string> used_type_defs;\n    } TypeInfo;\n    \n    funcdef get_type_info(type_string type) returns(TypeInfo info)\n        authentication optional;\n    \n    funcdef get_all_type_info(modulename mod) returns(list<TypeInfo>)\n        authentication optional;\n    \n    /* Information about a function\n    \n        func_string func_def - resolved func definition id.\n        string description - the description of the function from spec file.\n        string spec_def - reconstruction of function definition from spec file.\n        string parsing_structure - json document describing parsing structure of function \n            in spec file including types of arguments.\n        list<spec_version> module_vers - versions of spec files containing\n            given func version.\n        list<spec_version> released_module_vers - released versions of spec files \n            containing given func version.\n        list<func_string> func_vers - all versions of function with given type\n            name.\n        list<func_string> released_func_vers - all released versions of function \n            with given type name.\n        list<type_string> used_type_defs - list of types (with versions) \n            referred to from this function version.\n    */\n    typedef structure {\n        func_string func_def;\n        string description;\n        string spec_def;\n        string parsing_structure;\n        list<spec_version> module_vers;\n        list<spec_version> released_module_vers;\n        list<func_string> func_vers;\n        list<func_string> released_func_vers;\n        list<type_string> used_type_defs;\n    } FuncInfo;\n    \n    funcdef get_func_info(func_string func) returns(FuncInfo info)\n        authentication optional;\n    \n    funcdef get_all_func_info(modulename mod) returns(list<FuncInfo> info)\n        authentication optional;\n    \n    /* Parameters for the grant_module_ownership function.\n        \n        Required arguments:\n        modulename mod - the module to modify.\n        username new_owner - the user to add to the module's list of\n            owners.\n        \n        Optional arguments:\n        boolean with_grant_option - true to allow the user to add owners\n            to the module.\n    */\n    typedef structure {\n        modulename mod;\n        username new_owner;\n        boolean with_grant_option;\n    } GrantModuleOwnershipParams;\n    \n    /* Grant ownership of a module. You must have grant ability on the\n        module.\n    */\n    funcdef grant_module_ownership(GrantModuleOwnershipParams params) \n        returns() authentication required;\n    \n    /* Parameters for the remove_module_ownership function.\n        \n        Required arguments:\n        modulename mod - the module to modify.\n        username old_owner - the user to remove from the module's list of\n            owners.\n    */\n    typedef structure {\n        modulename mod;\n        username old_owner;\n    } RemoveModuleOwnershipParams;\n    \n    /* Remove ownership from a current owner. You must have the grant ability\n        on the module.\n    */\n    funcdef remove_module_ownership(RemoveModuleOwnershipParams params) \n        returns() authentication required;\n    \n    /* Parameters for list_all_types function.\n        \n        Optional arguments:\n        boolean with_empty_modules - include empty module names, optional flag,\n            default value is false.\n    */\n    typedef structure {\n        boolean with_empty_modules;\n    } ListAllTypesParams;\n    \n    /* List all released types with released version from all modules. Return\n        mapping from module name to mapping from type name to released type\n        version.\n    */\n    funcdef list_all_types(ListAllTypesParams params)\n        returns (mapping<modulename, mapping<typename, typever>>)\n        authentication optional;\n    \n    /* The administration interface. */\n    funcdef administer(UnspecifiedObject command)\n        returns(UnspecifiedObject response) authentication required;\n};","file_name":"workspace.spec","is_main":0}],"function_places":{}}